;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Tibetan
;;; created at:
;;;     Wed Jan 24 07:26:47 UTC 2018
;;; based on Matrix customization system version of:
;;;     Wed Jan 24 01:09:00 UTC 2018
;;;
;;; This is a basic grammar of Lhasa Tibetan
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

png :+ [ CONTRACTED bool,
    PER person,
    NUM number,
    GEND gender ].

noun :+ [ CASE case ].

head :+ [ AUX bool,
    FORM form ].

inflected :+ [ 3RD_PERSON_F_LEX-NOUN-FLAG luk,
    SELF-MARKER-FLAG luk,
    1DRA-AUX-OR-BYUNG-AUX-OR-SONG-AUX-OR-YONG-AUX-FLAG luk,
    PRON-NUM-MARKER-FLAG luk,
    MAN-AUX-OR-MED-AUX-OR-YOGMARED-AUX-FLAG luk,
    YOGMARED-AUX-OR-YOGRED-AUX-FLAG luk,
    MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG luk,
    1DUG-AUX-OR-YOD-AUX-OR-YOGMARED-AUX-OR-YOGRED-AUX-FLAG luk,
    NOUN-FLAG luk,
    CASE-MARKER-FLAG luk,
    YOD-AUX-FLAG luk,
    1DRA-AUX-OR-YIN-AUX-OR-YOD-AUX-OR-YOGRED-AUX-FLAG luk,
    1DUG-AUX-OR-MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG luk ].

infl-satisfied :+ [ 3RD_PERSON_F_LEX-NOUN-FLAG na-or-+,
    SELF-MARKER-FLAG na-or-+,
    1DRA-AUX-OR-BYUNG-AUX-OR-SONG-AUX-OR-YONG-AUX-FLAG na-or-+,
    PRON-NUM-MARKER-FLAG na-or-+,
    MAN-AUX-OR-MED-AUX-OR-YOGMARED-AUX-FLAG na-or-+,
    YOGMARED-AUX-OR-YOGRED-AUX-FLAG na-or-+,
    MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG na-or-+,
    1DUG-AUX-OR-YOD-AUX-OR-YOGMARED-AUX-OR-YOGRED-AUX-FLAG na-or-+,
    NOUN-FLAG na-or-+,
    CASE-MARKER-FLAG na-or-+,
    YOD-AUX-FLAG na-or-+,
    1DRA-AUX-OR-YIN-AUX-OR-YOD-AUX-OR-YOGRED-AUX-FLAG na-or-+,
    1DUG-AUX-OR-MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG na-or-+ ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
gen := case.  ; genitive
dat := case.  ; dative
ins := case.  ; instrumental
abs+erg := case.
abs := abs+erg.
erg := abs+erg.

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Number

number := *top*.
sg := number.
pl := number.

;;; Gender

gender := *top*.
m := gender.
f := gender.

;;; Form

form := *top*.
nonfinite := form.
finite := form.
self-centered := form.
other-centered := form.
self-centered-witnessed := form.
other-centered-witnessed := form.
unwitnessed := form.
marginal := form.

;;; Tense

past := tense.
present := tense.
future := tense.

;;; Aspect

prf := aspect.
rec := aspect.
pros := aspect.

;;; Mood

indic := mood.
interr := mood.
emph := mood.
corrob := mood.
wh-interr := mood.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr >,
    INFLECTED.NOUN-FLAG + ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-initial &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

common_noun_lex-noun-lex := noun-lex & case-marker-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                       NUM sg ],
    INFLECTED.CASE-MARKER-FLAG - ].

1st_person_lex-noun-lex := pron_lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

3rd_person_m_lex-noun-lex := pron_lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ GEND m,
                                       PER 3rd ] ].

2nd_person_lex-noun-lex := pron_lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

proper_noun_lex-noun-lex := no-spr-noun-lex & case-marker-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                       NUM sg ],
    INFLECTED.CASE-MARKER-FLAG - ].

3rd_person_f_lex-noun-lex := pron_lex-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PER 3rd,
                                       GEND f ],
    INFLECTED.3RD_PERSON_F_LEX-NOUN-FLAG + ].

pron_lex-noun-lex := no-spr-noun-lex & case-marker-rule-dtr & pron-num-marker-rule-dtr &
  [ INFLECTED [ PRON-NUM-MARKER-FLAG -,
                CASE-MARKER-FLAG -,
                SELF-MARKER-FLAG - ] ].

;;; Verbs

verb-lex := non-mod-lex-item & polarity-marker-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

abs-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE abs ] ].

erg-abs-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE erg ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE abs ] ] > ].

intransitive-verb-lex-verb-lex := abs-intransitive-verb-lex.

transitive-erg-verb-lex-verb-lex := transtive-verb-lex-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE erg,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE abs ] ].

obj-dat-trans-verb-lex-verb-lex := transtive-verb-lex-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE abs+erg,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE dat ] ].

transtive-verb-lex-verb-lex := transitive-verb-lex.

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE #case ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ HEAD verb,
                           VAL [ COMPS < >,
                                 SPR < >,
                                 SPEC < >,
                                 SUBJ < unexpressed &
                                        [ LOCAL.CAT.HEAD.CASE #case ] > ] ] ] > ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

subj-raise-aux-no-pred := subj-raise-aux & raise-sem-lex-item &
  [ ARG-ST < [ ],
             [ LOCAL.CAT.HEAD.AUX - ] > ].

yin-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form,
    INFLECTED [ 1DRA-AUX-OR-YIN-AUX-OR-YOD-AUX-OR-YOGRED-AUX-FLAG +,
                MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG +,
                1DUG-AUX-OR-MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG + ] ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

red-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT [ HEAD.FORM other-centered,
                       VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form ],
    INFLECTED [ MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG +,
                1DUG-AUX-OR-MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG + ] ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

yod-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form,
    INFLECTED [ 1DRA-AUX-OR-YIN-AUX-OR-YOD-AUX-OR-YOGRED-AUX-FLAG +,
                YOD-AUX-FLAG +,
                1DUG-AUX-OR-YOD-AUX-OR-YOGMARED-AUX-OR-YOGRED-AUX-FLAG + ] ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

yogred-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form,
    INFLECTED [ 1DRA-AUX-OR-YIN-AUX-OR-YOD-AUX-OR-YOGRED-AUX-FLAG +,
                YOGMARED-AUX-OR-YOGRED-AUX-FLAG +,
                1DUG-AUX-OR-YOD-AUX-OR-YOGMARED-AUX-OR-YOGRED-AUX-FLAG + ] ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

1dug-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form,
    INFLECTED [ 1DUG-AUX-OR-MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG +,
                1DUG-AUX-OR-YOD-AUX-OR-YOGMARED-AUX-OR-YOGRED-AUX-FLAG + ] ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

1dra-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form,
    INFLECTED [ 1DRA-AUX-OR-YIN-AUX-OR-YOD-AUX-OR-YOGRED-AUX-FLAG +,
                1DRA-AUX-OR-BYUNG-AUX-OR-SONG-AUX-OR-YONG-AUX-FLAG + ] ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

byung-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE past,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form ],
    INFLECTED.1DRA-AUX-OR-BYUNG-AUX-OR-SONG-AUX-OR-YONG-AUX-FLAG + ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

song-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE past,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form ],
    INFLECTED.1DRA-AUX-OR-BYUNG-AUX-OR-SONG-AUX-OR-YONG-AUX-FLAG + ].

; To keep the semantically empty ones from spinning on
; generation, require complement to be [AUX -].  The
; FORM feature might be enough in the starter grammars,
; but I don't want to rely on this.  Then again, [ AUX - ]
; might not be true.

yong-aux-lex := subj-raise-aux-no-pred &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.TENSE future,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form ],
    INFLECTED.1DRA-AUX-OR-BYUNG-AUX-OR-SONG-AUX-OR-YONG-AUX-FLAG + ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.

med-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form,
    INFLECTED [ MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG +,
                1DUG-AUX-OR-MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG +,
                MAN-AUX-OR-MED-AUX-OR-YOGMARED-AUX-FLAG + ] ].

man-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form,
    INFLECTED [ MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG +,
                1DUG-AUX-OR-MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG +,
                MAN-AUX-OR-MED-AUX-OR-YOGMARED-AUX-FLAG + ] ].

yogmared-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form,
    INFLECTED [ MAN-AUX-OR-MED-AUX-OR-YOGMARED-AUX-FLAG +,
                YOGMARED-AUX-OR-YOGRED-AUX-FLAG +,
                1DUG-AUX-OR-YOD-AUX-OR-YOGMARED-AUX-OR-YOGRED-AUX-FLAG + ] ].

;;; Complementizers

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

determinant-adj-lex-determiner-lex := determiner-lex & no-icons-lex-item.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

; Adjective Incorporation

adj_incorporation-lex-rule := add-only-rule &
  [ C-CONT [ RELS <! arg1-ev-relation &
                     [ LBL #ltop,
                       ARG1 #index ] !>,
             HOOK #hook ],
    DTR.SYNSEM.LOCAL [ CAT.HEAD noun,
                       CONT.HOOK #hook &
                                 [ LTOP #ltop,
                                   INDEX #index ] ] ].

;;; Intermediate rule types

pron-num-marker-rule-dtr := word-or-lexrule.
polarity-marker-rule-dtr := word-or-lexrule.
case-marker-rule-dtr := word-or-lexrule.

;;; Lexical rule types

case-marker-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ CASE-MARKER-FLAG +,
                MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG #man-aux-or-med-aux-or-red-aux-or-yin-aux,
                3RD_PERSON_F_LEX-NOUN-FLAG #3rd_person_f_lex-noun,
                SELF-MARKER-FLAG #self-marker,
                1DRA-AUX-OR-BYUNG-AUX-OR-SONG-AUX-OR-YONG-AUX-FLAG #1dra-aux-or-byung-aux-or-song-aux-or-yong-aux,
                MAN-AUX-OR-MED-AUX-OR-YOGMARED-AUX-FLAG #man-aux-or-med-aux-or-yogmared-aux,
                1DUG-AUX-OR-YOD-AUX-OR-YOGMARED-AUX-OR-YOGRED-AUX-FLAG #1dug-aux-or-yod-aux-or-yogmared-aux-or-yogred-aux,
                NOUN-FLAG #noun,
                PRON-NUM-MARKER-FLAG #pron-num-marker,
                YOD-AUX-FLAG #yod-aux,
                1DRA-AUX-OR-YIN-AUX-OR-YOD-AUX-OR-YOGRED-AUX-FLAG #1dra-aux-or-yin-aux-or-yod-aux-or-yogred-aux,
                YOGMARED-AUX-OR-YOGRED-AUX-FLAG #yogmared-aux-or-yogred-aux,
                1DUG-AUX-OR-MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG #1dug-aux-or-man-aux-or-med-aux-or-red-aux-or-yin-aux ],
    DTR case-marker-rule-dtr &
        [ INFLECTED [ MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG #man-aux-or-med-aux-or-red-aux-or-yin-aux,
                      3RD_PERSON_F_LEX-NOUN-FLAG #3rd_person_f_lex-noun,
                      SELF-MARKER-FLAG #self-marker,
                      1DRA-AUX-OR-BYUNG-AUX-OR-SONG-AUX-OR-YONG-AUX-FLAG #1dra-aux-or-byung-aux-or-song-aux-or-yong-aux,
                      MAN-AUX-OR-MED-AUX-OR-YOGMARED-AUX-FLAG #man-aux-or-med-aux-or-yogmared-aux,
                      1DUG-AUX-OR-YOD-AUX-OR-YOGMARED-AUX-OR-YOGRED-AUX-FLAG #1dug-aux-or-yod-aux-or-yogmared-aux-or-yogred-aux,
                      NOUN-FLAG #noun,
                      PRON-NUM-MARKER-FLAG #pron-num-marker,
                      YOD-AUX-FLAG #yod-aux,
                      1DRA-AUX-OR-YIN-AUX-OR-YOD-AUX-OR-YOGRED-AUX-FLAG #1dra-aux-or-yin-aux-or-yod-aux-or-yogred-aux,
                      YOGMARED-AUX-OR-YOGRED-AUX-FLAG #yogmared-aux-or-yogred-aux,
                      1DUG-AUX-OR-MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG #1dug-aux-or-man-aux-or-med-aux-or-red-aux-or-yin-aux ] ] ].

dative-lex-rule-lex-rule := case-marker-lex-rule-super & infl-lex-rule &
  [ DTR.INFLECTED.NOUN-FLAG +,
    SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

bare-abs-rule-lex-rule := case-marker-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE abs ].

ergative-lex-rule-lex-rule := case-marker-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE erg ].

instrumental-lex-rule-lex-rule := case-marker-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE ins ].

self-marker-lex-rule-super := add-only-no-ccont-rule & case-marker-rule-dtr & pron-num-marker-rule-dtr &
  [ INFLECTED [ SELF-MARKER-FLAG +,
                1DRA-AUX-OR-YIN-AUX-OR-YOD-AUX-OR-YOGRED-AUX-FLAG #1dra-aux-or-yin-aux-or-yod-aux-or-yogred-aux,
                MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG #man-aux-or-med-aux-or-red-aux-or-yin-aux,
                3RD_PERSON_F_LEX-NOUN-FLAG #3rd_person_f_lex-noun,
                1DRA-AUX-OR-BYUNG-AUX-OR-SONG-AUX-OR-YONG-AUX-FLAG #1dra-aux-or-byung-aux-or-song-aux-or-yong-aux,
                MAN-AUX-OR-MED-AUX-OR-YOGMARED-AUX-FLAG #man-aux-or-med-aux-or-yogmared-aux,
                1DUG-AUX-OR-YOD-AUX-OR-YOGMARED-AUX-OR-YOGRED-AUX-FLAG #1dug-aux-or-yod-aux-or-yogmared-aux-or-yogred-aux,
                NOUN-FLAG #noun,
                PRON-NUM-MARKER-FLAG #pron-num-marker,
                YOD-AUX-FLAG #yod-aux,
                CASE-MARKER-FLAG #case-marker,
                YOGMARED-AUX-OR-YOGRED-AUX-FLAG #yogmared-aux-or-yogred-aux,
                1DUG-AUX-OR-MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG #1dug-aux-or-man-aux-or-med-aux-or-red-aux-or-yin-aux ],
    DTR pron_lex-noun-lex &
        [ INFLECTED [ 1DRA-AUX-OR-YIN-AUX-OR-YOD-AUX-OR-YOGRED-AUX-FLAG #1dra-aux-or-yin-aux-or-yod-aux-or-yogred-aux,
                      MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG #man-aux-or-med-aux-or-red-aux-or-yin-aux,
                      3RD_PERSON_F_LEX-NOUN-FLAG #3rd_person_f_lex-noun,
                      1DRA-AUX-OR-BYUNG-AUX-OR-SONG-AUX-OR-YONG-AUX-FLAG #1dra-aux-or-byung-aux-or-song-aux-or-yong-aux,
                      MAN-AUX-OR-MED-AUX-OR-YOGMARED-AUX-FLAG #man-aux-or-med-aux-or-yogmared-aux,
                      1DUG-AUX-OR-YOD-AUX-OR-YOGMARED-AUX-OR-YOGRED-AUX-FLAG #1dug-aux-or-yod-aux-or-yogmared-aux-or-yogred-aux,
                      NOUN-FLAG #noun,
                      PRON-NUM-MARKER-FLAG #pron-num-marker,
                      YOD-AUX-FLAG #yod-aux,
                      CASE-MARKER-FLAG #case-marker,
                      YOGMARED-AUX-OR-YOGRED-AUX-FLAG #yogmared-aux-or-yogred-aux,
                      1DUG-AUX-OR-MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG #1dug-aux-or-man-aux-or-med-aux-or-red-aux-or-yin-aux ] ] ].

self-indicate-rule-lex-rule := infl-lex-rule & self-marker-lex-rule-super.

self-unindicated-rule-lex-rule := const-lex-rule & self-marker-lex-rule-super.

pron-num-marker-lex-rule-super := add-only-no-ccont-rule & case-marker-rule-dtr &
  [ INFLECTED [ PRON-NUM-MARKER-FLAG +,
                1DRA-AUX-OR-YIN-AUX-OR-YOD-AUX-OR-YOGRED-AUX-FLAG #1dra-aux-or-yin-aux-or-yod-aux-or-yogred-aux,
                3RD_PERSON_F_LEX-NOUN-FLAG #3rd_person_f_lex-noun,
                SELF-MARKER-FLAG #self-marker,
                1DRA-AUX-OR-BYUNG-AUX-OR-SONG-AUX-OR-YONG-AUX-FLAG #1dra-aux-or-byung-aux-or-song-aux-or-yong-aux,
                MAN-AUX-OR-MED-AUX-OR-YOGMARED-AUX-FLAG #man-aux-or-med-aux-or-yogmared-aux,
                1DUG-AUX-OR-YOD-AUX-OR-YOGMARED-AUX-OR-YOGRED-AUX-FLAG #1dug-aux-or-yod-aux-or-yogmared-aux-or-yogred-aux,
                NOUN-FLAG #noun,
                MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG #man-aux-or-med-aux-or-red-aux-or-yin-aux,
                YOD-AUX-FLAG #yod-aux,
                CASE-MARKER-FLAG #case-marker,
                YOGMARED-AUX-OR-YOGRED-AUX-FLAG #yogmared-aux-or-yogred-aux,
                1DUG-AUX-OR-MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG #1dug-aux-or-man-aux-or-med-aux-or-red-aux-or-yin-aux ],
    DTR pron-num-marker-rule-dtr &
        [ INFLECTED [ 1DRA-AUX-OR-YIN-AUX-OR-YOD-AUX-OR-YOGRED-AUX-FLAG #1dra-aux-or-yin-aux-or-yod-aux-or-yogred-aux,
                      3RD_PERSON_F_LEX-NOUN-FLAG #3rd_person_f_lex-noun,
                      SELF-MARKER-FLAG #self-marker,
                      1DRA-AUX-OR-BYUNG-AUX-OR-SONG-AUX-OR-YONG-AUX-FLAG #1dra-aux-or-byung-aux-or-song-aux-or-yong-aux,
                      MAN-AUX-OR-MED-AUX-OR-YOGMARED-AUX-FLAG #man-aux-or-med-aux-or-yogmared-aux,
                      1DUG-AUX-OR-YOD-AUX-OR-YOGMARED-AUX-OR-YOGRED-AUX-FLAG #1dug-aux-or-yod-aux-or-yogmared-aux-or-yogred-aux,
                      NOUN-FLAG #noun,
                      MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG #man-aux-or-med-aux-or-red-aux-or-yin-aux,
                      YOD-AUX-FLAG #yod-aux,
                      CASE-MARKER-FLAG #case-marker,
                      YOGMARED-AUX-OR-YOGRED-AUX-FLAG #yogmared-aux-or-yogred-aux,
                      1DUG-AUX-OR-MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG #1dug-aux-or-man-aux-or-med-aux-or-red-aux-or-yin-aux ] ] ].

plural-pron-rule-lex-rule := infl-lex-rule & pron-num-marker-lex-rule-super &
  [ DTR.INFLECTED.3RD_PERSON_F_LEX-NOUN-FLAG na ].

singular-pron-rule-lex-rule := const-lex-rule & pron-num-marker-lex-rule-super.

polarity-marker-lex-rule-super := cont-change-only-lex-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR polarity-marker-rule-dtr &
        [ INFLECTED #infl &
                    [ MAN-AUX-OR-MED-AUX-OR-YOGMARED-AUX-FLAG na ] ] ].

; This adds negative semantics to the verb's
; RELS list.

negation-marker-rule-lex-rule := polarity-marker-lex-rule-super &
  [ C-CONT [ HOOK [ XARG #xarg,
                    LTOP #ltop,
                    INDEX #ind ],
             RELS <! event-relation &
                     [ PRED "neg_rel",
                       LBL #ltop,
                       ARG1 #harg ] !>,
             HCONS <! qeq &
                      [ HARG #harg,
                        LARG #larg ] !> ],
    SYNSEM.LKEYS #lkeys,
    DTR [ INFLECTED.1DRA-AUX-OR-YIN-AUX-OR-YOD-AUX-OR-YOGRED-AUX-FLAG na,
          SYNSEM [ LKEYS #lkeys,
                   LOCAL [ CONT.HOOK [ XARG #xarg,
                                       INDEX #ind,
                                       LTOP #larg ],
                           CAT.HEAD verb ] ] ] ].

negation-marker-rule1-lex-rule := negation-marker-rule-lex-rule.

negation-marker-rule2-lex-rule := negation-marker-rule-lex-rule.

tense-marker-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR aux-lex &
        [ INFLECTED #infl &
                    [ 1DRA-AUX-OR-BYUNG-AUX-OR-SONG-AUX-OR-YONG-AUX-FLAG na ] ] ].

past-tense-rule-lex-rule := tense-marker-lex-rule-super &
  [ DTR.INFLECTED.1DUG-AUX-OR-YOD-AUX-OR-YOGMARED-AUX-OR-YOGRED-AUX-FLAG na,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

present-tense-rule-lex-rule := past-tense-rule-lex-rule &
  [ DTR.INFLECTED.MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG na ].

future-tense-rule-lex-rule := tense-marker-lex-rule-super &
  [ DTR.INFLECTED.YOGMARED-AUX-OR-YOGRED-AUX-FLAG na,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE future ].

pa-fut-lex-rule := future-tense-rule-lex-rule &
  [ DTR.INFLECTED.1DUG-AUX-OR-MAN-AUX-OR-MED-AUX-OR-RED-AUX-OR-YIN-AUX-FLAG na ].

gi-fut-lex-rule := future-tense-rule-lex-rule &
  [ DTR.INFLECTED.YOD-AUX-FLAG na ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

comp-head-phrase := basic-head-1st-comp-phrase & head-final.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].
