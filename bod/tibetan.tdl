;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Tibetan
;;; created at:
;;;     Thu Jan 18 21:07:26 UTC 2018
;;; based on Matrix customization system version of:
;;;     Thu Jan 18 20:23:02 UTC 2018
;;;
;;; This is a basic grammar of Lhasa Tibetan
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case ].

head :+ [ AUX bool,
    FORM form ].

inflected :+ [ CASE-MARKER-FLAG luk,
    NOUN-FLAG luk ].

infl-satisfied :+ [ CASE-MARKER-FLAG na-or-+,
    NOUN-FLAG na-or-+ ].

png :+ [ PER person ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
erg := case.  ; ergative
abs := case.  ; absolutive
gen := case.  ; genitive
dat := case.  ; dative
ins := case.  ; instrumental

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Tense

past := tense.
present := tense.
future := tense.

;;; Aspect

perfect := aspect.
recent := aspect.
prospective := aspect.
imminent := aspect.
preparative := aspect.
premeditated := aspect.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr >,
    INFLECTED [ CASE-MARKER-FLAG -,
                NOUN-FLAG + ] ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-initial &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

basic-noun-noun-lex := noun-lex.

first-person-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

3rd-person-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

2nd-person-lex-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 2nd ].

proper-noun-lex-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

1st_erg_pron-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE erg,
                   CONT.HOOK.INDEX.PNG.PER 1st ] ].

1st_loc_pron-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PER 1st ].

3rd_erg_pron-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.PNG.PER 3rd,
                   CAT.HEAD.CASE abs ] ].

2nd_erg_pron-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE erg,
                   CONT.HOOK.INDEX.PNG.PER 2nd ] ].

3rd_loc_pron-noun-lex := no-spr-noun-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.CASE abs,
                   CONT.HOOK.INDEX.PNG.PER 3rd ] ].

;;; Verbs

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT [ HEAD verb,
                       HC-LIGHT - ] ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

abs-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE abs ] ].

erg-abs-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE erg ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE abs ] ] > ].

intransitive-verb-lex-verb-lex := abs-intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM form ].

transitive-verb-lex-verb-lex := perfect-verb-verb-lex & erg-abs-transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM form ].

perfect-verb-verb-lex := verb-lex &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.E.ASPECT perfect,
                   CAT.HEAD.FORM form ] ].

perfective-intransitive-verb-verb-lex := intransitive-verb-lex-verb-lex & perfect-verb-verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM form ].

perfective-transitive-dative-verb-lex-verb-lex := perfect-verb-verb-lex & transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE erg,
                             COMPS.FIRST.LOCAL.CAT.HEAD.CASE dat ],
                       HEAD.FORM form ] ].

future-ditransitive-verb-lex-verb-lex := erg-abs-transitive-verb-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE future ].

past-transitive-verb-lex-verb-lex := erg-abs-transitive-verb-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

;;; Auxiliaries

arg-comp-aux := aux-lex & basic-two-arg &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps . #vcomps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE #case ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LIGHT +,
               LOCAL [ CONT.HOOK.XARG #xarg,
                       CAT [ HEAD verb,
                             VAL [ COMPS #vcomps,
                                   SUBJ < [ LOCAL.CAT.HEAD.CASE #case ] > ] ] ] ] > ].

; Somewhat surprisingly, this inherits from basic-two-arg, so
; that the non-local features are amalgamated from subj, the
; lexical verb complement, but not the other complements, if any.

; Not inheriting from basic-verb-lex, so need to put in
; event-relation by hand here.

arg-comp-aux-with-pred := arg-comp-aux & hcons-lex-item &
  [ SYNSEM [ LOCAL.CONT.HCONS <! qeq &
                                 [ HARG #harg,
                                   LARG #larg ] !>,
             LKEYS.KEYREL event-relation &
                          [ ARG1 #harg ] ],
    ARG-ST < [ ],
             [ LOCAL.CONT.HOOK.LTOP #larg ] > ].

linking_verbs-aux-lex := arg-comp-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM form ].

;;; Complementizers

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & norm-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

determinant-adj-lex-determiner-lex := determiner-lex & no-icons-lex-item.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

; Adjective Incorporation

adj_incorporation-lex-rule := add-only-rule &
  [ C-CONT [ RELS <! arg1-ev-relation &
                     [ LBL #ltop,
                       ARG1 #index ] !>,
             HOOK #hook ],
    DTR.SYNSEM.LOCAL [ CAT.HEAD noun,
                       CONT.HOOK #hook &
                                 [ LTOP #ltop,
                                   INDEX #index ] ] ].

;;; Lexical rule types

case-marker-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ CASE-MARKER-FLAG +,
                NOUN-FLAG #noun ],
    DTR noun-lex &
        [ INFLECTED.NOUN-FLAG #noun ] ].

dative-lex-rule-lex-rule := case-marker-lex-rule-super & infl-lex-rule &
  [ DTR.INFLECTED.NOUN-FLAG +,
    SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

bare-abs-rule-lex-rule := case-marker-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE abs ].

ergative-lex-rule-lex-rule := case-marker-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE erg ].

instrumental-lex-rule-lex-rule := case-marker-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE ins ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

comp-head-phrase := basic-head-1st-comp-phrase & head-final.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].
